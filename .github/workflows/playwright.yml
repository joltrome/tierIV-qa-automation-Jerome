name: Playwright Tests CI

# Trigger conditions for the workflow
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger from GitHub Actions tab

# Define jobs to run
jobs:
  test:
    # Runner environment
    runs-on: ubuntu-latest

    # Timeout for the entire job (30 minutes)
    timeout-minutes: 30

    strategy:
      # Don't cancel all jobs if one fails
      fail-fast: false
      matrix:
        # Test on multiple browsers
        browser: [chromium, firefox, webkit]

    steps:
      # Step 1: Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Install Playwright browsers and system dependencies
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      # Step 5: Run Playwright tests for specific browser
      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        continue-on-error: false

      # Step 6: Upload test results (always run, even if tests fail)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

      # Step 7: Upload HTML report (always run, even if tests fail)
      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

      # Step 8: Upload JUnit XML report for test tracking
      - name: Upload JUnit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-report-${{ matrix.browser }}
          path: test-results/junit.xml
          retention-days: 30

  # Summary job that runs after all browser tests complete
  test-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "All browser tests completed"
          echo "Check the artifacts section to download detailed test reports"